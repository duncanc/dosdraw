
const hammingBKTree = new Uint16Array([
  123, 57,
    7, 116, 9, 118, 11, 124, 12, 130, 13, 132, 15, 134, 16, 144, 17, 158, 18, 168, 19, 174, 20, 188, 21, 202, 22, 220, 23, 230, 24, 252, 25, 262, 26, 276, 27, 302, 28, 348, 29, 366, 30, 388,
    31, 410, 32, 460, 33, 478, 34, 504, 35, 510, 36, 528, 37, 538, 38, 568, 39, 598, 40, 628, 41, 646, 42, 672, 43, 690, 44, 736, 45, 770, 46, 792, 47, 798, 48, 828, 49, 858, 50, 880, 51, 882,
    52, 904, 53, 918, 54, 932, 55, 942, 56, 956, 57, 962, 59, 964, 61, 966, 62, 980, 63, 982, 67, 992, 73, 1002, 93, 1004, 97, 1006, 105, 1008,
  73, 0,
  108, 1, 6, 122,
  124, 0,
  40, 1, 16, 128,
  105, 0,
  49, 0,
  139, 0,
  84, 2, 16, 140, 26, 142,
  141, 0,
  58, 0,
  161, 3, 16, 152, 18, 154, 24, 156,
  24, 0,
  25, 0,
  244, 0,
  246, 2, 8, 164, 24, 166,
  59, 0,
  241, 0,
  125, 1, 22, 172,
  140, 0,
  91, 3, 24, 182, 26, 184, 28, 186,
  243, 0,
  249, 0,
  43, 0,
  231, 3, 14, 196, 22, 198, 28, 200,
  33, 0,
  173, 0,
  159, 0,
  46, 4, 4, 212, 6, 214, 22, 216, 28, 218,
  44, 0,
  250, 0,
  60, 0,
  179, 0,
  217, 2, 6, 226, 18, 228,
  192, 0,
  245, 0,
  20, 5, 36, 242, 38, 244, 40, 246, 42, 248, 44, 250,
  18, 0,
  23, 0,
  7, 0,
  32, 0,
  242, 0,
  180, 2, 6, 258, 32, 260,
  195, 0,
  4, 0,
  190, 3, 6, 270, 12, 272, 28, 274,
  193, 0,
  212, 0,
  116, 0,
  26, 6, 10, 290, 14, 292, 22, 294, 24, 296, 28, 298, 34, 300,
  45, 0,
  27, 0,
  191, 0,
  218, 0,
  126, 0,
  63, 0,
  213, 10, 10, 324, 12, 326, 16, 328, 22, 330, 26, 332, 28, 334, 30, 336, 34, 338, 44, 344, 46, 346,
  198, 0,
  184, 0,
  197, 0,
  181, 0,
  196, 0,
  61, 0,
  15, 0,
  6, 1, 50, 342,
  96, 0,
  248, 0,
  167, 0,
  92, 4, 24, 358, 26, 360, 28, 362, 32, 364,
  17, 0,
  31, 0,
  89, 0,
  229, 0,
  238, 5, 26, 378, 30, 380, 34, 382, 40, 384, 42, 386,
  39, 0,
  175, 0,
  62, 0,
  157, 0,
  194, 0,
  253, 5, 24, 400, 28, 402, 34, 404, 38, 406, 44, 408,
  94, 0,
  28, 0,
  236, 0,
  13, 0,
  30, 0,
  52, 10, 14, 432, 24, 434, 26, 436, 32, 438, 34, 440, 36, 450, 38, 452, 40, 454, 42, 456, 50, 458,
  93, 0,
  41, 0,
  232, 0,
  174, 0,
  205, 2, 10, 446, 32, 448,
  207, 0,
  224, 0,
  9, 0,
  166, 0,
  145, 0,
  47, 0,
  95, 0,
  170, 4, 16, 470, 28, 472, 30, 474, 36, 476,
  169, 0,
  240, 0,
  11, 0,
  5, 0,
  115, 6, 22, 492, 24, 494, 26, 496, 34, 498, 36, 500, 46, 502,
  247, 0,
  22, 0,
  120, 0,
  209, 0,
  12, 0,
  216, 0,
  122, 1, 44, 508,
  34, 0,
  37, 4, 22, 520, 30, 522, 32, 524, 34, 526,
  228, 0,
  55, 0,
  254, 0,
  168, 0,
  235, 2, 42, 534, 48, 536,
  252, 0,
  119, 0,
  132, 7, 22, 554, 24, 556, 30, 558, 32, 560, 38, 562, 40, 564, 48, 566,
  127, 0,
  99, 0,
  42, 0,
  29, 0,
  109, 0,
  135, 0,
  155, 0,
  3, 7, 26, 584, 28, 586, 30, 588, 32, 590, 34, 592, 36, 594, 48, 596,
  114, 0,
  97, 0,
  100, 0,
  101, 0,
  118, 0,
  137, 0,
  200, 0,
  74, 7, 20, 614, 24, 616, 26, 618, 36, 620, 40, 622, 42, 624, 44, 626,
  251, 0,
  134, 0,
  50, 0,
  67, 0,
  69, 0,
  237, 0,
  211, 0,
  133, 4, 14, 638, 20, 640, 42, 642, 46, 644,
  138, 0,
  38, 0,
  70, 0,
  189, 0,
  130, 6, 24, 660, 26, 662, 34, 664, 36, 666, 38, 668, 40, 670,
  129, 0,
  110, 0,
  227, 0,
  53, 0,
  208, 0,
  1, 0,
  16, 4, 30, 682, 38, 684, 40, 686, 52, 688,
  76, 0,
  117, 0,
  90, 0,
  51, 0,
  111, 10, 4, 712, 16, 714, 22, 716, 24, 718, 28, 720, 30, 722, 32, 724, 36, 726, 38, 728, 40, 730,
  148, 0,
  136, 0,
  131, 0,
  64, 0,
  146, 0,
  83, 0,
  107, 0,
  156, 0,
  48, 0,
  88, 1, 38, 734,
  102, 0,
  151, 8, 18, 754, 26, 756, 28, 758, 34, 760, 40, 762, 44, 764, 46, 766, 50, 768,
  160, 0,
  164, 0,
  35, 0,
  57, 0,
  226, 0,
  128, 0,
  188, 0,
  202, 0,
  106, 5, 40, 782, 42, 784, 44, 786, 46, 788, 56, 790,
  149, 0,
  142, 0,
  71, 0,
  75, 0,
  144, 0,
  233, 1, 40, 796,
  87, 0,
  98, 7, 18, 814, 20, 816, 22, 818, 32, 820, 36, 822, 44, 824, 48, 826,
  19, 0,
  54, 0,
  230, 0,
  65, 0,
  86, 0,
  214, 0,
  171, 0,
  225, 7, 20, 844, 24, 846, 32, 848, 38, 850, 50, 852, 58, 854, 62, 856,
  147, 0,
  163, 0,
  172, 0,
  80, 0,
  21, 0,
  183, 0,
  201, 0,
  150, 5, 18, 870, 22, 872, 32, 874, 36, 876, 56, 878,
  162, 0,
  234, 0,
  104, 0,
  112, 0,
  210, 0,
  36, 0,
  56, 5, 18, 894, 28, 896, 34, 898, 36, 900, 52, 902,
  239, 0,
  2, 0,
  113, 0,
  143, 0,
  176, 0,
  78, 3, 8, 912, 20, 914, 44, 916,
  72, 0,
  82, 0,
  14, 0,
  66, 3, 20, 926, 22, 928, 44, 930,
  79, 0,
  85, 0,
  103, 0,
  152, 2, 38, 938, 42, 940,
  187, 0,
  203, 0,
  153, 3, 24, 950, 28, 952, 56, 954,
  121, 0,
  68, 0,
  223, 0,
  77, 1, 50, 960,
  81, 0,
  154, 0,
  158, 0,
  204, 3, 4, 974, 62, 976, 64, 978,
  186, 0,
  165, 0,
  222, 0,
  199, 0,
  182, 2, 2, 988, 64, 990,
  215, 0,
  177, 0,
  185, 2, 4, 998, 62, 1000,
  206, 0,
  221, 0,
  220, 0,
  178, 0,
  10, 0,
  219, 1, 14, 1012,
  8, 0,
]);

export default hammingBKTree;

export const hammingDistance = (x: number, y: number) => {
  let count = 0;
  for (let diff = x ^ y; diff !== 0; ){
     diff &= diff-1;
     count++;
  }
  return count;
};

export const ham16 = (a: ArrayLike<number>, b: ArrayLike<number>) => {
  let count = 0;
  for (let i = 0; i < 16; i++) {
    count += hammingDistance(a[i], b[i]);
  }
  return count;
};

export const findNearest = (query: ArrayLike<number>, bitPatterns: ArrayLike<ArrayLike<number>>): [charCode: number, distance: number] => {
  let bestDistance = Infinity, bestCharCode = 0;
  const candidates = [0];
  do {
    const offset = candidates.pop()!;
    const charCode = hammingBKTree[offset];
    const dist = ham16(query, bitPatterns[charCode]);
    if (dist < bestDistance) {
      if (dist === 0) return [charCode, 0];
      bestDistance = dist;
      bestCharCode = charCode;
    }
    const childCount = hammingBKTree[offset + 1];
    const minDist = dist - bestDistance;
    const maxDist = dist + bestDistance;
    let child_i;
    for (child_i = 0; child_i < childCount; child_i++) {
      const childDist = hammingBKTree[offset + 2 + 2 * child_i];
      if (childDist >= minDist) {
        break;
      }
    }
    for (; child_i < childCount; child_i++) {
      const childDist = hammingBKTree[offset + 2 + 2 * child_i];
      if (childDist > maxDist) break;
      candidates.push(hammingBKTree[offset + 2 + 2 * child_i + 1]);
    }
  } while (candidates.length > 0);
  return [bestCharCode, bestDistance];
};
